name: 'Update images'

on: [push]

jobs:

  bump_version:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{steps.tag_version.outputs.new_tag}}
      is_release: ${{steps.tag_version.outputs.is_release}}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: '1'
      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch
      - name: Bump version and push tag
        id: tag_version
        uses: mhl787156/github-tag-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
          RELEASE_BRANCHES: master,main
          DEFAULT_BUMP: patch
          DEFAULT_PRERELEASE_BUMP: none
          DRY_RUN: true # Dont push new tag here, only push on successful build
          PRERELEASE_SUFFIX: ${{ steps.extract_branch.outputs.branch }}
      
  bake_images_stage_1:
    runs-on: ubuntu-latest
    needs: bump_version
    strategy:
      fail-fast: false
      matrix:
        include: 
          - target: rosbridge-suite
            arm64: false
          - target: starling-controller-base
            arm64: true
          - target: starling-mavros
            arm64: true
          - target: starling-vicon
            arm64: true
          - target: starling-sim-base-core
            arm64: false
          - target: mavp2p
            arm64: false
    steps:
      - name: Build Image (no push)
        id: build_image
        uses: StarlingUAS/starling-bake-build-action@main
        with:
          bakefile: ./buildtools/docker-bake.hcl
          target: ${{ matrix.target }}
          tag: ${{ needs.bump_version.outputs.tag }}
          registry: ghcr.io
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          prefix: starlinguas
          build_arm64: ${{matrix.arm64}}
          push: false
          load: true
      - name: Setup BATS
        uses: mig4/setup-bats@v1
        with:
          bats-version: 1.5.0
      - name: Run Tests
        run: |
          TESTS=$(find tests/ -type f -path '*${{ matrix.target }}*/*.bats' | sort)
          if [ ! -z "$TESTS" ]; then
            bats -F cat --jobs $(nproc) --timing $TESTS | sed -E 's|^ok|‚úîÔ∏è OK   |; s|^begin|‚û°Ô∏è Begin|; s|^suite .+/([^/]+/[^/]+.bats)$|üìã Suite \1|'
          else
            echo "No bats tests for ${{ matrix.target }} found in folder tests"
          fi
        env:
          TEST_IMAGE_TAG: ${{ steps.build_image.outputs.version }}
          TEST_IMAGE_PREFIX: ghcr.io/starlinguas
      - name: Build Image (load and push)
        uses: StarlingUAS/starling-bake-build-action@main
        with:
          bakefile: ./buildtools/docker-bake.hcl
          target: ${{ matrix.target }}
          tag: ${{ needs.bump_version.outputs.tag }}
          registry: ghcr.io
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          prefix: starlinguas
          build_arm64: ${{matrix.arm64}}
          push: true
          skip_setup: true


  bake_images_stage_2:
    runs-on: ubuntu-latest
    needs: [bump_version, bake_images_stage_1]
    strategy:
      matrix:
        include: 
          - target: starling-sim-base-px4
            arm64: false
          - target: starling-sim-px4-sitl
            arm64: false
          - target: starling-sim-ardupilot-gazebo
            arm64: false
          - target: starling-sim-ardupilot-copter
            arm64: false
          - target: starling-sim-ardupilot-plane
            arm64: false
          - target: example_python_controller
            arm64: true
    steps:
      - name: Build Image
        id: build_image
        uses: StarlingUAS/starling-bake-build-action@main
        with:
          bakefile: ./buildtools/docker-bake.hcl
          target: ${{ matrix.target }}
          tag: ${{ needs.bump_version.outputs.tag }}
          registry: ghcr.io
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          prefix: starlinguas
          build_arm64: ${{matrix.arm64}}
          push: false
          load: true
      - name: Setup BATS
        uses: mig4/setup-bats@v1
        with:
          bats-version: 1.5.0
      - name: Run Tests
        run: |
          TESTS=$(find tests/ -type f -path '*${{ matrix.target }}*/*.bats' | sort)
          if [ ! -z "$TESTS" ]; then
            bats -F cat --jobs $(nproc) --timing $TESTS | sed -E 's|^ok|‚úîÔ∏è OK   |; s|^begin|‚û°Ô∏è Begin|; s|^suite .+/([^/]+/[^/]+.bats)$|üìã Suite \1|'
          else
            echo "No bats tests for ${{ matrix.target }} found in folder tests"
          fi
        env:
          TEST_IMAGE_TAG: ${{ steps.build_image.outputs.version }}
          TEST_IMAGE_PREFIX: ghcr.io/starlinguas
      - name: Build Image (load and push)
        uses: StarlingUAS/starling-bake-build-action@main
        with:
          bakefile: ./buildtools/docker-bake.hcl
          target: ${{ matrix.target }}
          tag: ${{ needs.bump_version.outputs.tag }}
          registry: ghcr.io
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          prefix: starlinguas
          build_arm64: ${{matrix.arm64}}
          push: true
          skip_setup: true

    
  bake_images_stage_3:
    runs-on: ubuntu-latest
    needs: [bump_version, bake_images_stage_2]
    strategy:
      matrix:
        include:
          - target: starling-sim-iris
            arm64: false
          - target: starling-sim-iris-ap
            arm64: false
    outputs:
      release: ${{steps.push_image.outputs.release }}
      version: ${{steps.build_image.outputs.version }}
    steps:
      - name: Build Image
        id: build_image
        uses: StarlingUAS/starling-bake-build-action@main
        with:
          bakefile: ./buildtools/docker-bake.hcl
          target: ${{ matrix.target }}
          tag: ${{ needs.bump_version.outputs.tag }}
          registry: ghcr.io
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          prefix: starlinguas
          build_arm64: ${{ matrix.arm64 }}
          push: false
          load: true
      - name: Setup BATS
        uses: mig4/setup-bats@v1
        with:
          bats-version: 1.5.0
      - name: Run Tests
        run: |
          TESTS=$(find tests/ -type f -path '*${{ matrix.target }}*/*.bats' | sort)
          if [ ! -z "$TESTS" ]; then
            bats -F cat --jobs $(nproc) --timing $TESTS | sed -E 's|^ok|‚úîÔ∏è OK   |; s|^begin|‚û°Ô∏è Begin|; s|^suite .+/([^/]+/[^/]+.bats)$|üìã Suite \1|'
          else
            echo "No bats tests for ${{ matrix.target }} found in folder tests"
          fi
        env:
          TEST_IMAGE_TAG: ${{ steps.build_image.outputs.version }}
          TEST_IMAGE_PREFIX: ghcr.io/starlinguas
      - name: Build Image (load and push)
        uses: StarlingUAS/starling-bake-build-action@main
        with:
          bakefile: ./buildtools/docker-bake.hcl
          target: ${{ matrix.target }}
          tag: ${{ needs.bump_version.outputs.tag }}
          registry: ghcr.io
          registry_username: ${{ github.actor }}
          registry_password: ${{ secrets.GITHUB_TOKEN }}
          prefix: starlinguas
          build_arm64: ${{matrix.arm64}}
          push: true
          skip_setup: true


  release_version:
    needs: [bump_version, bake_images_stage_3]
    runs-on: ubuntu-latest
    steps:
      - name: Install regctl
        uses: regclient/actions/regctl-installer@main

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Upload images to DockerHub
        run: |
          for IMAGE in ${IMAGES}; do
            regctl image copy \
                ghcr.io/starlinguas/${IMAGE}:${{ needs.bake_images_stage_3.outputs.version }} \
                uobflightlabstarling/${IMAGE}:${{ needs.bake_images_stage_3.outputs.version }}
            if [ ! -z ${{ needs.bake_images_stage_3.outputs.release }} ]; then
              regctl image copy \
                ghcr.io/starlinguas/${IMAGE}:${{ needs.bake_images_stage_3.outputs.release }} \
                uobflightlabstarling/${IMAGE}:${{ needs.bake_images_stage_3.outputs.release }}
            fi
          done
        env:
          IMAGES: "rosbridge-suite starling-controller-base starling-mavros starling-vicon starling-sim-base-core mavp2p starling-sim-base-px4 starling-sim-px4-sitl starling-sim-ardupilot-gazebo starling-sim-ardupilot-copter example_python_controller starling-sim-iris starling-sim-iris-ap"

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        if: |
          !failure() && !cancelled() && success() &&
          needs.bump_version.outputs.is_release == 'true'
        with:
          tag: ${{ needs.bump_version.outputs.tag }}
          name: Release ${{ needs.bump_version.outputs.tag }}
          allowUpdates: true

          