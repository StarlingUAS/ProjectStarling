#!/usr/bin/env python3

# See https://click.palletsprojects.com/
import click

# See https://github.com/kubernetes-client/python
from kubernetes import client, config

@click.group()
@click.option('--kubeconfig', default=None, help='Specify kubeconfig file')
def starling(kubeconfig):
    if kubeconfig is None:
        config.load_kube_config()
    else:
        # Load from file specified
        pass


@starling.group()
def vehicle():
    pass


@vehicle.command('list')
def vehicle_list():
    v1api = client.CoreV1API()
    v1api.list_node(label_selector='starling.uas/type=vehicle')


@vehicle.command('info')
@click.argument('vehiclename', help='Name of vehicle')
def vehicle_info(vehiclename):
    pass


@starling.command()
@click.argument('deployfile', help='kNs deployment file')
def deploy(deployfile):
    import yaml

    with open(deployfile) as f:
        dep = yaml.safe_load(f)
        client = client.AppsV11Api()
        resp = client.create_namespaced_deployment(
            body=dep, namespace="default")
        print("Deployment created. status='%s'" % str(resp.status))


@starling.command()
def kill():
    import rclpy
    from rclpy.node import Node
    from std_msgs.msg import String

    node = Node('starling_cli')
    publisher = node.create_publisher(String, 'topic', 10)
    
    msg = String()
    msg.data = "EMERGENCY STOP"

    publisher.publish(msg)

    node.destry_node()
    rclpy.shutdown()
